package com.nitk.it.glassassistant;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.media.AudioManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;

import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class SocketClientActivity extends Activity {

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    private View mView;

    private Socket socket;
    private File imageFile;
    private InputStream inputStream;
    private OutputStream outputStream;
    private String caption;
    private byte [] imageBytes;
    private long length;
    private SendImageTask sendImageTask;

    public class SendImageTask extends AsyncTask<Void, Void, Void> {

        @Override
        protected Void doInBackground(Void... voids) {
            System.out.println("Entering SocketClientActivity.SendImageTask doInBackground");
            if (isCancelled()) {
                return null;
            }
            try {
                socket = new Socket("192.168.43.205",5000);
                imageBytes = new byte[16 * 1024];
                length = imageFile.length();
                outputStream = socket.getOutputStream();
                inputStream = new FileInputStream(imageFile);
                int count;
                while ((count = inputStream.read(imageBytes)) > 0) {
                    outputStream.write(imageBytes, 0, count);
                }
                outputStream.flush();
                outputStream.close();
                inputStream.close();
                socket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onProgressUpdate(Void... values) {
            System.out.println("Entering SocketClientActivity.SendImageTask onProgressUpdate");
            super.onProgressUpdate(values);
        }

        @Override
        protected void onPostExecute(Void aLong) {
            System.out.println("Entering SocketClientActivity.SendImageTask onPostExecute");
            super.onPostExecute(aLong);
            sendImageTask.cancel(true);
            getResponseFromServer();
        }

    }

    @Override
    protected void onCreate(Bundle bundle) {
        System.out.println("Entering SocketClientActivity onCreate");
        super.onCreate(bundle);

        mView = buildView();

        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });
        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                am.playSoundEffect(Sounds.DISALLOWED);
            }
        });
        setContentView(mCardScroller);
        imageFile = (File) getIntent().getExtras().get("IMAGE");
        sendImageTask = new SendImageTask();
        sendImageTask.execute();
    }

    private void getResponseFromServer() {
        System.out.println("Entering SocketClientActivity getResponseFromServer");
        // TODO: Receive caption from server
        caption = "DUMMY CAPTION";
        Intent resultIntent = new Intent();
        resultIntent.putExtra("CAPTION", caption);
        setResult(Activity.RESULT_OK, resultIntent);
        finish();
    }

    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    /**
     * View displayed while image is being sent and response is received.
     */
    private View buildView() {
        System.out.println("Entering SocketClientActivity.SendImageTask buildView");
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);

        card.setText(R.string.sending_image_socket);
        return card.getView();
    }

}
